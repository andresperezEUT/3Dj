TITLE:: OrientationController
summary:: A class for managing interaction with an orientation sensing device
categories:: Libraries>3Dj
related:: Guides/3Dj, Classes/SSWorld

DESCRIPTION::
This class provides a convenience method for easy access to the events generated by an orientation sensing device, for instance a smartphone.

Devices communicate via OSC, and for the moment they should be connected to the same subnet.

Logger/playback (aka looper) functionality is also available.

note::
In order to avoid reference system problems, the 0ยบ azimuth is taken as the first azimuth angle received
::

subsection:: Message format

Any application compilant with the message format is able to communicate with the orientation controller.

The three messages are:
code::
[/orientationController/orientation, azimuth, elevation, roll] // in degrees
[/orientationController/acceleration, x, y, z] 
[/orientationController/gravity, x, y, z]
::



CLASSMETHODS::

METHOD:: new


INSTANCEMETHODS::

private:: initializeBuffers, initOC




subsection:: Sensing

METHOD:: acceleration
Get the current sensed acceleration

METHOD:: gravity
Get the current sensed gravity

METHOD:: azimuth 
Get the current azimuth (yaw) value
note::
Reference azimuth (=0) is considered as the first received azimuth value
::

METHOD:: elevation
Get the current elevation (pitch) value

METHOD:: roll
Get current roll value

METHOD:: setAction
Set an action to be performed when a new sensor value is received

ARGUMENT:: key
a code::Symbol:: representing the kind of data. Possible values:
list::
## code::\orientation::
## code::\gravity::
## code::\acceleration::
::

ARGUMENT:: aFunc
the Function to be performed. Two arguments will be passed to the function:
list::
## code::args:: : For gravity and acceleration sensors, an Array with the sensed acceleration [x,y,z].
For orientation sensor, an Array in the form [azimuth,elevation,roll].
## code::time:: : Timestamp of the received message
::


METHOD:: enableOscListeners
Enable sensor listening

METHOD:: disableOscListeners
Disable sensor listening





subsection:: Log control

METHOD:: log
Set whether to start or stop logging the sensor activity
ARGUMENT:: state
a Boolean

METHOD:: logging
Get if code::this:: is currently logging data

subsection:: Playback control

METHOD:: replay
If currently there is no playback, start it
ARGUMENT:: repeat
number of repetitions

METHOD:: pause
Pause the playback

METHOD:: resume
Resume the playback from where it was paused

METHOD:: stop
Stop playback

METHOD:: isPlaying
Answers whether the class is playing back





EXAMPLES::

code::
(
// create a simple sound scene with 1 object
w=SSWorld.new.showView;
o=SSObject(w,loc:[3,0,0]);

// setup the Orientation Controller
c=OrientationController.new;
c.setAction(\orientation,{|args,time|
	var azi = args[0];
	var ele = args[1];
	
	o.locSph_(azi:azi);
	o.locSph_(ele:ele);
});

// localhost
n = NetAddr.new( "localhost", NetAddr.langPort );

// let's simulate we have a sensing controller
t=Task({
	var azi=0;
	var ele=0;
	30.do{ |i|
		azi = azi + (0.5*i);
		ele = ele + (5.rand2);
		n.sendMsg( "/orientationController/orientation", azi, ele, 0);
		[azi,ele].postln;
		0.1.wait;
	}
});

)

// perform motion
t.start

// let's start to log..
c.log_(true)
// ..and perform the motion
t.start

// when finished, stop logging
c.log_(false)

// now we recorded the incoming messages. let's play them back:
c.replay
c.pause
c.resume

// also selective replay
c.pause
c.replay(3) // three times

::
